/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/vendor/Onix/js/codeEditor/code-editor/index.js":
/*!******************************************************************!*\
  !*** ./resources/vendor/Onix/js/codeEditor/code-editor/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CodeEditor\": () => (/* binding */ CodeEditor)\n/* harmony export */ });\n/* harmony import */ var split_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! split.js */ \"./node_modules/split.js/dist/split.es.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//Original work Copyright (c) 2018, Duarte Henriques, https://github.com/portablemind/grapesjs-code-editor\n//Modified work Copyright (c) 2020, Brendon Ngirazi,\n//All rights reserved.\n\nvar CodeEditor = /*#__PURE__*/function () {\n  function CodeEditor(editor, opts) {\n    _classCallCheck(this, CodeEditor);\n\n    this.editor = editor;\n    this.$ = editor.$;\n    this.pfx = editor.getConfig(\"stylePrefix\");\n    this.opts = opts;\n    this.canvas = this.findWithinEditor(\".\".concat(this.pfx, \"cv-canvas\"));\n    this.panelViews = opts.appendTo ? this.$(opts.appendTo) : this.findWithinEditor(\".\".concat(this.pfx, \"pn-\").concat(opts.panelId));\n    this.isShowing = true;\n  }\n\n  _createClass(CodeEditor, [{\n    key: \"findPanel\",\n    value: function findPanel() {\n      var pn = this.editor.Panels;\n      var id = this.opts.panelId;\n      var panel = pn.getPanel(id) || pn.addPanel({\n        id: id\n      });\n      return panel;\n    }\n  }, {\n    key: \"findWithinEditor\",\n    value: function findWithinEditor(selector) {\n      return this.$(selector, this.editor.getEl());\n    }\n  }, {\n    key: \"buildCodeEditor\",\n    value: function buildCodeEditor(type) {\n      var editor = this.editor,\n          opts = this.opts;\n      return editor.CodeManager.createViewer(_objectSpread({\n        codeName: type === \"html\" ? \"htmlmixed\" : \"css\",\n        theme: \"hopscotch\",\n        readOnly: 0,\n        autoBeautify: 1,\n        autoCloseTags: 1,\n        autoCloseBrackets: 1,\n        styleActiveLine: 1,\n        smartIndent: 1\n      }, opts.codeViewOptions));\n    }\n  }, {\n    key: \"buildSection\",\n    value: function buildSection(type, codeViewer) {\n      var $ = this.$,\n          pfx = this.pfx,\n          opts = this.opts;\n      var section = $(\"<section></section>\");\n      var btnText = type === \"html\" ? opts.htmlBtnText : opts.cssBtnText;\n      var cleanCssBtn = opts.cleanCssBtn && type === \"css\" ? \"<button class=\\\"cp-delete-\".concat(type, \" \").concat(pfx, \"btn-prim\\\">\").concat(opts.cleanCssBtnText, \"</button>\") : \"\";\n      section.append($(\"\\n            <div class=\\\"codepanel-separator\\\">\\n                <div class=\\\"codepanel-label\\\">\".concat(type, \"</div>\\n                <div class=\\\"cp-btn-container\\\">\\n                    \").concat(cleanCssBtn, \"\\n                    <button class=\\\"cp-apply-\").concat(type, \" \").concat(pfx, \"btn-prim\\\">\").concat(btnText, \"</button>\\n                </div>\\n            </div>\")));\n      var codeViewerEl = codeViewer.getElement();\n      codeViewerEl.style.height = \"calc(100% - 30px)\";\n      section.append(codeViewerEl);\n      this.codePanel.append(section);\n      return section.get(0);\n    }\n  }, {\n    key: \"buildCodePanel\",\n    value: function buildCodePanel() {\n      var _this = this;\n\n      var $ = this.$,\n          editor = this.editor;\n      var panel = this.opts.panelId ? this.findPanel() : 0;\n      this.codePanel = $(\"<div></div>\");\n      this.codePanel.addClass(\"code-panel\");\n      this.htmlCodeEditor = this.buildCodeEditor(\"html\");\n      this.cssCodeEditor = this.buildCodeEditor(\"css\");\n      var sections = [this.buildSection(\"html\", this.htmlCodeEditor), this.buildSection(\"css\", this.cssCodeEditor)];\n      panel && !this.opts.appendTo && panel.set(\"appendContent\", this.codePanel).trigger(\"change:appendContent\");\n      this.opts.appendTo && $(this.opts.appendTo).append(this.codePanel);\n      this.updateEditorContents();\n      this.codePanel.find(\".cp-apply-html\").on(\"click\", this.updateHtml.bind(this));\n      this.codePanel.find(\".cp-apply-css\").on(\"click\", this.updateCss.bind(this));\n      this.opts.cleanCssBtn && this.codePanel.find(\".cp-delete-css\").on(\"click\", this.deleteSelectedCss.bind(this));\n      (0,split_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(sections, {\n        direction: \"vertical\",\n        sizes: [50, 50],\n        minSize: 100,\n        gutterSize: 1,\n        onDragEnd: this.refreshEditors.bind(this)\n      });\n      editor.on(\"component:update\", function (model) {\n        return _this.updateEditorContents();\n      });\n    }\n  }, {\n    key: \"showCodePanel\",\n    value: function showCodePanel() {\n      this.isShowing = true;\n      this.updateEditorContents();\n      this.codePanel.css(\"display\", \"block\"); // make sure editor is aware of width change after the 300ms effect ends\n\n      setTimeout(this.refreshEditors.bind(this), 320);\n      if (this.opts.preserveWidth) return;\n      this.panelViews.css(\"width\", this.opts.openState.pn);\n      this.canvas.css(\"width\", this.opts.openState.cv);\n    }\n  }, {\n    key: \"hideCodePanel\",\n    value: function hideCodePanel() {\n      if (this.codePanel) this.codePanel.css(\"display\", \"none\");\n      this.isShowing = false;\n      if (this.opts.preserveWidth) return;\n      this.panelViews.css(\"width\", this.opts.closedState.pn);\n      this.canvas.css(\"width\", this.opts.closedState.cv);\n    }\n  }, {\n    key: \"refreshEditors\",\n    value: function refreshEditors() {\n      this.htmlCodeEditor.refresh();\n      this.cssCodeEditor.refresh();\n    }\n  }, {\n    key: \"updateHtml\",\n    value: function updateHtml(e) {\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      var editor = this.editor,\n          component = this.component;\n      var htmlCode = this.htmlCodeEditor.getContent().trim();\n      if (!htmlCode || htmlCode === this.previousHtmlCode) return;\n      this.previousHtmlCode = htmlCode;\n      var idStyles = \"\";\n      this.cssCodeEditor.getContent().split(/(?<=}\\n)/g).forEach(function (rule) {\n        if (/^#/.test(rule)) idStyles += rule;\n      });\n      htmlCode += \"<style>\".concat(idStyles, \"</style>\");\n      editor.select(component.replaceWith(htmlCode));\n    }\n  }, {\n    key: \"updateCss\",\n    value: function updateCss(e) {\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      var cssCode = this.cssCodeEditor.getContent().trim();\n      if (!cssCode || cssCode === this.previousCssCode) return;\n      this.parseRemove(cssCode);\n      this.previousCssCode = cssCode;\n      this.editor.Components.addComponent(\"<style>\".concat(cssCode, \"</style>\"));\n    }\n  }, {\n    key: \"deleteSelectedCss\",\n    value: function deleteSelectedCss(e) {\n      var _this2 = this;\n\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      var selections = this.cssCodeEditor.editor.getSelections();\n      selections.forEach(function (selection) {\n        return _this2.parseRemove(selection);\n      });\n      this.cssCodeEditor.editor.deleteH();\n    }\n  }, {\n    key: \"parseRemove\",\n    value: function parseRemove(removeCss) {\n      var _this3 = this;\n\n      var editor = this.editor;\n      var cssc = editor.CssComposer;\n      var allRules = cssc.getAll();\n      editor.Parser.parseCss(removeCss).forEach(function (p) {\n        var config = {\n          singleAtRule: p.singleAtRule,\n          atRuleType: p.atRuleType,\n          mediaText: p.mediaText,\n          state: p.state\n        };\n        p.selectors.length && p.selectors.forEach(function (selector) {\n          _this3.removeSelector(selector, allRules, cssc, config);\n        });\n        p.selectorsAdd && p.selectorsAdd.split(\", \").forEach(function (selector) {\n          _this3.removeSelector(selector, allRules, cssc, config);\n        });\n      });\n    }\n  }, {\n    key: \"removeSelector\",\n    value: function removeSelector(rule, allRules, cssc) {\n      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var singleAtRule = opts.singleAtRule,\n          atRuleType = opts.atRuleType,\n          mediaText = opts.mediaText,\n          state = opts.state;\n      var toRemove = allRules.filter(function (r) {\n        if (atRuleType && mediaText) return function (r) {\n          return r.get(\"atRuleType\") == atRuleType && r.get(\"mediaText\") == mediaText;\n        };else if (atRuleType && singleAtRule) return function (r) {\n          return r.get(\"atRuleType\") == atRuleType && r.get(\"singleAtRule\") == singleAtRule;\n        };else if (state) return r == cssc.getRule(\"\".concat(rule, \":\").concat(state));\n        return r == cssc.getRule(rule);\n      });\n      allRules.remove(toRemove);\n    }\n  }, {\n    key: \"updateEditorContents\",\n    value: function updateEditorContents() {\n      if (!this.isShowing) return;\n      this.component = this.editor.getSelected();\n\n      if (this.component) {\n        this.htmlCodeEditor.setContent(this.getComponentHtml(this.component));\n        this.cssCodeEditor.setContent(this.editor.CodeManager.getCode(this.component, \"css\", {\n          cssc: this.editor.CssComposer\n        }));\n      }\n    }\n  }, {\n    key: \"getComponentHtml\",\n    value: function getComponentHtml(component) {\n      var pfx = this.pfx,\n          opts = this.opts;\n      var result = \"\";\n      var componentEl = component.getEl();\n      !opts.clearData && componentEl.classList.remove(\"\".concat(pfx, \"selected\"));\n      var html = opts.clearData ? component.toHTML() : componentEl.id === \"wrapper\" ? componentEl.innerHTML : componentEl.outerHTML;\n      !opts.clearData && componentEl.classList.add(\"\".concat(pfx, \"selected\"));\n      result += html;\n      var js = opts.editJs ? component.getScriptString() : \"\";\n      result += js ? \"<script>\".concat(js, \"</script>\") : \"\";\n      return result;\n    }\n  }]);\n\n  return CodeEditor;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/vendor/Onix/js/codeEditor/code-editor/index.js\n");

/***/ }),

/***/ "./resources/vendor/Onix/js/codeEditor/commands.js":
/*!*********************************************************!*\
  !*** ./resources/vendor/Onix/js/codeEditor/commands.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _code_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code-editor */ \"./resources/vendor/Onix/js/codeEditor/code-editor/index.js\");\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consts */ \"./resources/vendor/Onix/js/codeEditor/consts.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor, opts) {\n  var cm = editor.Commands;\n  var codeEditor = null;\n  cm.add(_consts__WEBPACK_IMPORTED_MODULE_1__.openCodeStr, {\n    run: function run(editor) {\n      !codeEditor && (codeEditor = new _code_editor__WEBPACK_IMPORTED_MODULE_0__.CodeEditor(editor, opts)) && codeEditor.buildCodePanel();\n      codeEditor.showCodePanel();\n    },\n    stop: function stop(editor) {\n      codeEditor && codeEditor.hideCodePanel();\n    }\n  });\n  cm.add(_consts__WEBPACK_IMPORTED_MODULE_1__.getObject, function (editor, sender) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return new _code_editor__WEBPACK_IMPORTED_MODULE_0__.CodeEditor(editor, _objectSpread(_objectSpread({}, options), opts));\n  });\n  cm.add(_consts__WEBPACK_IMPORTED_MODULE_1__.getConstuctor, function () {\n    return _code_editor__WEBPACK_IMPORTED_MODULE_0__.CodeEditor;\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdmVuZG9yL09uaXgvanMvY29kZUVkaXRvci9jb21tYW5kcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUEsaUVBQWUsVUFBQ0ksTUFBRCxFQUFTQyxJQUFULEVBQWtCO0FBQzdCLE1BQU1DLEVBQUUsR0FBR0YsTUFBTSxDQUFDRyxRQUFsQjtBQUNBLE1BQUlDLFVBQVUsR0FBRyxJQUFqQjtBQUVBRixFQUFBQSxFQUFFLENBQUNHLEdBQUgsQ0FBT1IsZ0RBQVAsRUFBb0I7QUFDaEJTLElBQUFBLEdBQUcsRUFBRSxhQUFBTixNQUFNLEVBQUk7QUFDWCxPQUFDSSxVQUFELEtBQWdCQSxVQUFVLEdBQUcsSUFBSVIsb0RBQUosQ0FBZUksTUFBZixFQUF1QkMsSUFBdkIsQ0FBN0IsS0FBOERHLFVBQVUsQ0FBQ0csY0FBWCxFQUE5RDtBQUNBSCxNQUFBQSxVQUFVLENBQUNJLGFBQVg7QUFDSCxLQUplO0FBS2hCQyxJQUFBQSxJQUFJLEVBQUUsY0FBQVQsTUFBTSxFQUFJO0FBQ1pJLE1BQUFBLFVBQVUsSUFBSUEsVUFBVSxDQUFDTSxhQUFYLEVBQWQ7QUFDSDtBQVBlLEdBQXBCO0FBVUFSLEVBQUFBLEVBQUUsQ0FBQ0csR0FBSCxDQUFPUCw4Q0FBUCxFQUFrQixVQUFDRSxNQUFELEVBQVNXLE1BQVQsRUFBa0M7QUFBQSxRQUFqQkMsT0FBaUIsdUVBQVAsRUFBTztBQUNoRCxXQUFPLElBQUloQixvREFBSixDQUFlSSxNQUFmLGtDQUE0QlksT0FBNUIsR0FBd0NYLElBQXhDLEVBQVA7QUFDSCxHQUZEO0FBSUFDLEVBQUFBLEVBQUUsQ0FBQ0csR0FBSCxDQUFPTixrREFBUCxFQUFzQixZQUFNO0FBQ3hCLFdBQU9ILG9EQUFQO0FBQ0gsR0FGRDtBQUdILENBckJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3ZlbmRvci9Pbml4L2pzL2NvZGVFZGl0b3IvY29tbWFuZHMuanM/ZTI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlRWRpdG9yIH0gZnJvbSAnLi9jb2RlLWVkaXRvcic7XHJcbmltcG9ydCB7IG9wZW5Db2RlU3RyLCBnZXRPYmplY3QsIGdldENvbnN0dWN0b3IgfSBmcm9tICcuL2NvbnN0cyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoZWRpdG9yLCBvcHRzKSA9PiB7XHJcbiAgICBjb25zdCBjbSA9IGVkaXRvci5Db21tYW5kcztcclxuICAgIGxldCBjb2RlRWRpdG9yID0gbnVsbDtcclxuXHJcbiAgICBjbS5hZGQob3BlbkNvZGVTdHIsIHtcclxuICAgICAgICBydW46IGVkaXRvciA9PiB7XHJcbiAgICAgICAgICAgICFjb2RlRWRpdG9yICYmIChjb2RlRWRpdG9yID0gbmV3IENvZGVFZGl0b3IoZWRpdG9yLCBvcHRzKSkgJiYgY29kZUVkaXRvci5idWlsZENvZGVQYW5lbCgpO1xyXG4gICAgICAgICAgICBjb2RlRWRpdG9yLnNob3dDb2RlUGFuZWwoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0b3A6IGVkaXRvciA9PiB7XHJcbiAgICAgICAgICAgIGNvZGVFZGl0b3IgJiYgY29kZUVkaXRvci5oaWRlQ29kZVBhbmVsKCk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNtLmFkZChnZXRPYmplY3QsIChlZGl0b3IsIHNlbmRlciwgb3B0aW9ucyA9IHt9KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2RlRWRpdG9yKGVkaXRvciwgeyAuLi5vcHRpb25zLCAuLi5vcHRzIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY20uYWRkKGdldENvbnN0dWN0b3IsICgpID0+IHtcclxuICAgICAgICByZXR1cm4gQ29kZUVkaXRvcjtcclxuICAgIH0pO1xyXG59Il0sIm5hbWVzIjpbIkNvZGVFZGl0b3IiLCJvcGVuQ29kZVN0ciIsImdldE9iamVjdCIsImdldENvbnN0dWN0b3IiLCJlZGl0b3IiLCJvcHRzIiwiY20iLCJDb21tYW5kcyIsImNvZGVFZGl0b3IiLCJhZGQiLCJydW4iLCJidWlsZENvZGVQYW5lbCIsInNob3dDb2RlUGFuZWwiLCJzdG9wIiwiaGlkZUNvZGVQYW5lbCIsInNlbmRlciIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/vendor/Onix/js/codeEditor/commands.js\n");

/***/ }),

/***/ "./resources/vendor/Onix/js/codeEditor/consts.js":
/*!*******************************************************!*\
  !*** ./resources/vendor/Onix/js/codeEditor/consts.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"openCodeStr\": () => (/* binding */ openCodeStr),\n/* harmony export */   \"getObject\": () => (/* binding */ getObject),\n/* harmony export */   \"getConstuctor\": () => (/* binding */ getConstuctor)\n/* harmony export */ });\nvar openCodeStr = 'open-code',\n    getObject = 'code-editor-object',\n    getConstuctor = 'code-editor-constructor';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdmVuZG9yL09uaXgvanMvY29kZUVkaXRvci9jb25zdHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFDSEEsV0FBVyxHQUFHLFdBRFg7QUFBQSxJQUVIQyxTQUFTLEdBQUcsb0JBRlQ7QUFBQSxJQUdIQyxhQUFhLEdBQUcseUJBSGIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvdmVuZG9yL09uaXgvanMvY29kZUVkaXRvci9jb25zdHMuanM/MWI5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3RcclxuICAgIG9wZW5Db2RlU3RyID0gJ29wZW4tY29kZScsXHJcbiAgICBnZXRPYmplY3QgPSAnY29kZS1lZGl0b3Itb2JqZWN0JyxcclxuICAgIGdldENvbnN0dWN0b3IgPSAnY29kZS1lZGl0b3ItY29uc3RydWN0b3InOyJdLCJuYW1lcyI6WyJvcGVuQ29kZVN0ciIsImdldE9iamVjdCIsImdldENvbnN0dWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/vendor/Onix/js/codeEditor/consts.js\n");

/***/ }),

/***/ "./resources/vendor/Onix/js/codeEditor/grapeCodeEditor.js":
/*!****************************************************************!*\
  !*** ./resources/vendor/Onix/js/codeEditor/grapeCodeEditor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commands */ \"./resources/vendor/Onix/js/codeEditor/commands.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nwindow.grapesjs.plugins.add('code-editor', function (editor) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var options = _objectSpread(_objectSpread({}, {\n    //Panel to append the code editor\n    panelId: 'views-container',\n    //Append to element instead of views-container\n    appendTo: '',\n    //State when open\n    openState: {\n      cv: '65%',\n      pn: '35%'\n    },\n    //State when closed\n    closedState: {\n      cv: '85%',\n      pn: '15%'\n    },\n    //Allow editing of javascript, set allowScripts to true for this to work\n    editJs: false,\n    //Remove component data eg data-gjs-type=\"...\"\n    clearData: false,\n    //Code viewer options\n    codeViewOptions: {},\n    //Used to remove css from the Selector Manager\n    cleanCssBtn: true,\n    //Save HTML button text\n    htmlBtnText: 'Apply',\n    //Save CSS button text\n    cssBtnText: 'Apply',\n    //Clean CSS button text\n    cleanCssBtnText: 'Delete'\n  }), opts); // Load commands\n\n\n  (0,_commands__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(editor, options);\n}); // export default (editor, opts = {}) => {\n//     const options = {\n//         ...{\n//             //Panel to append the code editor\n//             panelId: 'views-container',\n//             //Append to element instead of views-container\n//             appendTo: '',\n//             //State when open\n//             openState: {\n//                 cv: '65%',\n//                 pn: '35%'\n//             },\n//             //State when closed\n//             closedState: {\n//                 cv: '85%',\n//                 pn: '15%'\n//             },\n//             //Allow editing of javascript, set allowScripts to true for this to work\n//             editJs: false,\n//             //Remove component data eg data-gjs-type=\"...\"\n//             clearData: false,\n//             //Code viewer options\n//             codeViewOptions: {},\n//             //Used to remove css from the Selector Manager\n//             cleanCssBtn: true,\n//             //Save HTML button text\n//             htmlBtnText: 'Apply',\n//             //Save CSS button text\n//             cssBtnText: 'Apply',\n//             //Clean CSS button text\n//             cleanCssBtnText: 'Delete'\n//         },\n//         ...opts\n//     };\n//     // Load commands\n//     commands(editor, options);\n// };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdmVuZG9yL09uaXgvanMvY29kZUVkaXRvci9ncmFwZUNvZGVFZGl0b3IuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUVBQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLE9BQWhCLENBQXdCQyxHQUF4QixDQUE0QixhQUE1QixFQUEyQyxVQUFDQyxNQUFELEVBQXVCO0FBQUEsTUFBZEMsSUFBYyx1RUFBUCxFQUFPOztBQUM5RCxNQUFNQyxPQUFPLG1DQUNOO0FBQ0M7QUFDQUMsSUFBQUEsT0FBTyxFQUFFLGlCQUZWO0FBR0M7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLEVBSlg7QUFLQztBQUNBQyxJQUFBQSxTQUFTLEVBQUU7QUFDUEMsTUFBQUEsRUFBRSxFQUFFLEtBREc7QUFFUEMsTUFBQUEsRUFBRSxFQUFFO0FBRkcsS0FOWjtBQVVDO0FBQ0FDLElBQUFBLFdBQVcsRUFBRTtBQUNURixNQUFBQSxFQUFFLEVBQUUsS0FESztBQUVUQyxNQUFBQSxFQUFFLEVBQUU7QUFGSyxLQVhkO0FBZUM7QUFDQUUsSUFBQUEsTUFBTSxFQUFFLEtBaEJUO0FBaUJDO0FBQ0FDLElBQUFBLFNBQVMsRUFBRSxLQWxCWjtBQW1CQztBQUNBQyxJQUFBQSxlQUFlLEVBQUUsRUFwQmxCO0FBcUJDO0FBQ0FDLElBQUFBLFdBQVcsRUFBRSxJQXRCZDtBQXVCQztBQUNBQyxJQUFBQSxXQUFXLEVBQUUsT0F4QmQ7QUF5QkM7QUFDQUMsSUFBQUEsVUFBVSxFQUFFLE9BMUJiO0FBMkJDO0FBQ0FDLElBQUFBLGVBQWUsRUFBRTtBQTVCbEIsR0FETSxHQStCTmQsSUEvQk0sQ0FBYixDQUQ4RCxDQW1DOUQ7OztBQUNBTixFQUFBQSxxREFBUSxDQUFDSyxNQUFELEVBQVNFLE9BQVQsQ0FBUjtBQUNILENBckNELEdBdUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3ZlbmRvci9Pbml4L2pzL2NvZGVFZGl0b3IvZ3JhcGVDb2RlRWRpdG9yLmpzP2VhMmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xyXG5cclxud2luZG93LmdyYXBlc2pzLnBsdWdpbnMuYWRkKCdjb2RlLWVkaXRvcicsIChlZGl0b3IsIG9wdHMgPSB7fSkgPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAuLi57XHJcbiAgICAgICAgICAgIC8vUGFuZWwgdG8gYXBwZW5kIHRoZSBjb2RlIGVkaXRvclxyXG4gICAgICAgICAgICBwYW5lbElkOiAndmlld3MtY29udGFpbmVyJyxcclxuICAgICAgICAgICAgLy9BcHBlbmQgdG8gZWxlbWVudCBpbnN0ZWFkIG9mIHZpZXdzLWNvbnRhaW5lclxyXG4gICAgICAgICAgICBhcHBlbmRUbzogJycsXHJcbiAgICAgICAgICAgIC8vU3RhdGUgd2hlbiBvcGVuXHJcbiAgICAgICAgICAgIG9wZW5TdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgY3Y6ICc2NSUnLFxyXG4gICAgICAgICAgICAgICAgcG46ICczNSUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vU3RhdGUgd2hlbiBjbG9zZWRcclxuICAgICAgICAgICAgY2xvc2VkU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIGN2OiAnODUlJyxcclxuICAgICAgICAgICAgICAgIHBuOiAnMTUlJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL0FsbG93IGVkaXRpbmcgb2YgamF2YXNjcmlwdCwgc2V0IGFsbG93U2NyaXB0cyB0byB0cnVlIGZvciB0aGlzIHRvIHdvcmtcclxuICAgICAgICAgICAgZWRpdEpzOiBmYWxzZSxcclxuICAgICAgICAgICAgLy9SZW1vdmUgY29tcG9uZW50IGRhdGEgZWcgZGF0YS1nanMtdHlwZT1cIi4uLlwiXHJcbiAgICAgICAgICAgIGNsZWFyRGF0YTogZmFsc2UsXHJcbiAgICAgICAgICAgIC8vQ29kZSB2aWV3ZXIgb3B0aW9uc1xyXG4gICAgICAgICAgICBjb2RlVmlld09wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICAvL1VzZWQgdG8gcmVtb3ZlIGNzcyBmcm9tIHRoZSBTZWxlY3RvciBNYW5hZ2VyXHJcbiAgICAgICAgICAgIGNsZWFuQ3NzQnRuOiB0cnVlLFxyXG4gICAgICAgICAgICAvL1NhdmUgSFRNTCBidXR0b24gdGV4dFxyXG4gICAgICAgICAgICBodG1sQnRuVGV4dDogJ0FwcGx5JyxcclxuICAgICAgICAgICAgLy9TYXZlIENTUyBidXR0b24gdGV4dFxyXG4gICAgICAgICAgICBjc3NCdG5UZXh0OiAnQXBwbHknLFxyXG4gICAgICAgICAgICAvL0NsZWFuIENTUyBidXR0b24gdGV4dFxyXG4gICAgICAgICAgICBjbGVhbkNzc0J0blRleHQ6ICdEZWxldGUnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAuLi5vcHRzXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIExvYWQgY29tbWFuZHNcclxuICAgIGNvbW1hbmRzKGVkaXRvciwgb3B0aW9ucyk7XHJcbn0pO1xyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgKGVkaXRvciwgb3B0cyA9IHt9KSA9PiB7XHJcbi8vICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4vLyAgICAgICAgIC4uLntcclxuLy8gICAgICAgICAgICAgLy9QYW5lbCB0byBhcHBlbmQgdGhlIGNvZGUgZWRpdG9yXHJcbi8vICAgICAgICAgICAgIHBhbmVsSWQ6ICd2aWV3cy1jb250YWluZXInLFxyXG4vLyAgICAgICAgICAgICAvL0FwcGVuZCB0byBlbGVtZW50IGluc3RlYWQgb2Ygdmlld3MtY29udGFpbmVyXHJcbi8vICAgICAgICAgICAgIGFwcGVuZFRvOiAnJyxcclxuLy8gICAgICAgICAgICAgLy9TdGF0ZSB3aGVuIG9wZW5cclxuLy8gICAgICAgICAgICAgb3BlblN0YXRlOiB7XHJcbi8vICAgICAgICAgICAgICAgICBjdjogJzY1JScsXHJcbi8vICAgICAgICAgICAgICAgICBwbjogJzM1JSdcclxuLy8gICAgICAgICAgICAgfSxcclxuLy8gICAgICAgICAgICAgLy9TdGF0ZSB3aGVuIGNsb3NlZFxyXG4vLyAgICAgICAgICAgICBjbG9zZWRTdGF0ZToge1xyXG4vLyAgICAgICAgICAgICAgICAgY3Y6ICc4NSUnLFxyXG4vLyAgICAgICAgICAgICAgICAgcG46ICcxNSUnXHJcbi8vICAgICAgICAgICAgIH0sXHJcbi8vICAgICAgICAgICAgIC8vQWxsb3cgZWRpdGluZyBvZiBqYXZhc2NyaXB0LCBzZXQgYWxsb3dTY3JpcHRzIHRvIHRydWUgZm9yIHRoaXMgdG8gd29ya1xyXG4vLyAgICAgICAgICAgICBlZGl0SnM6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICAvL1JlbW92ZSBjb21wb25lbnQgZGF0YSBlZyBkYXRhLWdqcy10eXBlPVwiLi4uXCJcclxuLy8gICAgICAgICAgICAgY2xlYXJEYXRhOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgLy9Db2RlIHZpZXdlciBvcHRpb25zXHJcbi8vICAgICAgICAgICAgIGNvZGVWaWV3T3B0aW9uczoge30sXHJcbi8vICAgICAgICAgICAgIC8vVXNlZCB0byByZW1vdmUgY3NzIGZyb20gdGhlIFNlbGVjdG9yIE1hbmFnZXJcclxuLy8gICAgICAgICAgICAgY2xlYW5Dc3NCdG46IHRydWUsXHJcbi8vICAgICAgICAgICAgIC8vU2F2ZSBIVE1MIGJ1dHRvbiB0ZXh0XHJcbi8vICAgICAgICAgICAgIGh0bWxCdG5UZXh0OiAnQXBwbHknLFxyXG4vLyAgICAgICAgICAgICAvL1NhdmUgQ1NTIGJ1dHRvbiB0ZXh0XHJcbi8vICAgICAgICAgICAgIGNzc0J0blRleHQ6ICdBcHBseScsXHJcbi8vICAgICAgICAgICAgIC8vQ2xlYW4gQ1NTIGJ1dHRvbiB0ZXh0XHJcbi8vICAgICAgICAgICAgIGNsZWFuQ3NzQnRuVGV4dDogJ0RlbGV0ZSdcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIC4uLm9wdHNcclxuLy8gICAgIH07XHJcblxyXG4vLyAgICAgLy8gTG9hZCBjb21tYW5kc1xyXG4vLyAgICAgY29tbWFuZHMoZWRpdG9yLCBvcHRpb25zKTtcclxuLy8gfTtcclxuIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwid2luZG93IiwiZ3JhcGVzanMiLCJwbHVnaW5zIiwiYWRkIiwiZWRpdG9yIiwib3B0cyIsIm9wdGlvbnMiLCJwYW5lbElkIiwiYXBwZW5kVG8iLCJvcGVuU3RhdGUiLCJjdiIsInBuIiwiY2xvc2VkU3RhdGUiLCJlZGl0SnMiLCJjbGVhckRhdGEiLCJjb2RlVmlld09wdGlvbnMiLCJjbGVhbkNzc0J0biIsImh0bWxCdG5UZXh0IiwiY3NzQnRuVGV4dCIsImNsZWFuQ3NzQnRuVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/vendor/Onix/js/codeEditor/grapeCodeEditor.js\n");

/***/ }),

/***/ "./node_modules/split.js/dist/split.es.js":
/*!************************************************!*\
  !*** ./node_modules/split.js/dist/split.es.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar document = !ssr ? global.document : undefined;\n\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\nvar NOOP = function () { return false; };\n\n// Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\nvar calc = ssr\n    ? 'calc'\n    : ((['', '-webkit-', '-moz-', '-o-']\n          .filter(function (prefix) {\n              var el = document.createElement('div');\n              el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n              return !!el.style.length\n          })\n          .shift()) + \"calc\");\n\n// Helper function checks if its argument is a string-like type\nvar isString = function (v) { return typeof v === 'string' || v instanceof String; };\n\n// Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\nvar elementOrSelector = function (el) {\n    if (isString(el)) {\n        var ele = document.querySelector(el);\n        if (!ele) {\n            throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n        }\n        return ele\n    }\n\n    return el\n};\n\n// Helper function gets a property from the properties object, with a default fallback\nvar getOption = function (options, propName, def) {\n    var value = options[propName];\n    if (value !== undefined) {\n        return value\n    }\n    return def\n};\n\nvar getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n    if (isFirst) {\n        if (gutterAlign === 'end') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    } else if (isLast) {\n        if (gutterAlign === 'start') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    }\n\n    return gutterSize\n};\n\n// Default options\nvar defaultGutterFn = function (i, gutterDirection) {\n    var gut = document.createElement('div');\n    gut.className = \"gutter gutter-\" + gutterDirection;\n    return gut\n};\n\nvar defaultElementStyleFn = function (dim, size, gutSize) {\n    var style = {};\n\n    if (!isString(size)) {\n        style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n    } else {\n        style[dim] = size;\n    }\n\n    return style\n};\n\nvar defaultGutterStyleFn = function (dim, gutSize) {\n    var obj;\n\n    return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n};\n\n// The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\nvar Split = function (idsOption, options) {\n    if ( options === void 0 ) options = {};\n\n    if (ssr) { return {} }\n\n    var ids = idsOption;\n    var dimension;\n    var clientAxis;\n    var position;\n    var positionEnd;\n    var clientSize;\n    var elements;\n\n    // Allow HTMLCollection to be used as an argument when supported\n    if (Array.from) {\n        ids = Array.from(ids);\n    }\n\n    // All DOM elements in the split should have a common parent. We can grab\n    // the first elements parent and hope users read the docs because the\n    // behavior will be whacky otherwise.\n    var firstElement = elementOrSelector(ids[0]);\n    var parent = firstElement.parentNode;\n    var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n    var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;\n\n    // Set default options.sizes to equal percentages of the parent element.\n    var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n    // Standardize minSize and maxSize to an array if it isn't already.\n    // This allows minSize and maxSize to be passed as a number.\n    var minSize = getOption(options, 'minSize', 100);\n    var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n    var maxSize = getOption(options, 'maxSize', Infinity);\n    var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () { return maxSize; });\n\n    // Get other options\n    var expandToMin = getOption(options, 'expandToMin', false);\n    var gutterSize = getOption(options, 'gutterSize', 10);\n    var gutterAlign = getOption(options, 'gutterAlign', 'center');\n    var snapOffset = getOption(options, 'snapOffset', 30);\n    var dragInterval = getOption(options, 'dragInterval', 1);\n    var direction = getOption(options, 'direction', HORIZONTAL);\n    var cursor = getOption(\n        options,\n        'cursor',\n        direction === HORIZONTAL ? 'col-resize' : 'row-resize'\n    );\n    var gutter = getOption(options, 'gutter', defaultGutterFn);\n    var elementStyle = getOption(\n        options,\n        'elementStyle',\n        defaultElementStyleFn\n    );\n    var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (direction === HORIZONTAL) {\n        dimension = 'width';\n        clientAxis = 'clientX';\n        position = 'left';\n        positionEnd = 'right';\n        clientSize = 'clientWidth';\n    } else if (direction === 'vertical') {\n        dimension = 'height';\n        clientAxis = 'clientY';\n        position = 'top';\n        positionEnd = 'bottom';\n        clientSize = 'clientHeight';\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains its metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    //\n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n\n    function setElementSize(el, size, gutSize, i) {\n        // Split.js allows setting sizes via numbers (ideally), or if you must,\n        // by string, like '300px'. This is less than ideal, because it breaks\n        // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n        // make sure you calculate the gutter size by hand.\n        var style = elementStyle(dimension, size, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            el.style[prop] = style[prop];\n        });\n    }\n\n    function setGutterSize(gutterElement, gutSize, i) {\n        var style = gutterStyle(dimension, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            gutterElement.style[prop] = style[prop];\n        });\n    }\n\n    function getSizes() {\n        return elements.map(function (element) { return element.size; })\n    }\n\n    // Supports touch events, but not multitouch, so only the first\n    // finger `touches[0]` is counted.\n    function getMousePosition(e) {\n        if ('touches' in e) { return e.touches[0][clientAxis] }\n        return e[clientAxis]\n    }\n\n    // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n    // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n    // which allows the viewport to be resized without additional logic.\n    // Element a's size is the same as offset. b's size is total size - a size.\n    // Both sizes are calculated from the initial parent percentage,\n    // then the gutter size is subtracted.\n    function adjust(offset) {\n        var a = elements[this.a];\n        var b = elements[this.b];\n        var percentage = a.size + b.size;\n\n        a.size = (offset / this.size) * percentage;\n        b.size = percentage - (offset / this.size) * percentage;\n\n        setElementSize(a.element, a.size, this[aGutterSize], a.i);\n        setElementSize(b.element, b.size, this[bGutterSize], b.i);\n    }\n\n    // drag, where all the magic happens. The logic is really quite simple:\n    //\n    // 1. Ignore if the pair is not dragging.\n    // 2. Get the offset of the event.\n    // 3. Snap offset to min if within snappable range (within min + snapOffset).\n    // 4. Actually adjust each element in the pair to offset.\n    //\n    // ---------------------------------------------------------------------\n    // |    | <- a.minSize               ||              b.minSize -> |    |\n    // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n    // |    |  |                         ||                        |  |    |\n    // |    |  |                         ||                        |  |    |\n    // ---------------------------------------------------------------------\n    // | <- this.start                                        this.size -> |\n    function drag(e) {\n        var offset;\n        var a = elements[this.a];\n        var b = elements[this.b];\n\n        if (!this.dragging) { return }\n\n        // Get the offset of the event from the first side of the\n        // pair `this.start`. Then offset by the initial position of the\n        // mouse compared to the gutter size.\n        offset =\n            getMousePosition(e) -\n            this.start +\n            (this[aGutterSize] - this.dragOffset);\n\n        if (dragInterval > 1) {\n            offset = Math.round(offset / dragInterval) * dragInterval;\n        }\n\n        // If within snapOffset of min or max, set offset to min or max.\n        // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n        // Include the appropriate gutter sizes to prevent overflows.\n        if (offset <= a.minSize + snapOffset + this[aGutterSize]) {\n            offset = a.minSize + this[aGutterSize];\n        } else if (\n            offset >=\n            this.size - (b.minSize + snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.minSize + this[bGutterSize]);\n        }\n\n        if (offset >= a.maxSize - snapOffset + this[aGutterSize]) {\n            offset = a.maxSize + this[aGutterSize];\n        } else if (\n            offset <=\n            this.size - (b.maxSize - snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.maxSize + this[bGutterSize]);\n        }\n\n        // Actually adjust the size.\n        adjust.call(this, offset);\n\n        // Call the drag callback continously. Don't do anything too intensive\n        // in this callback.\n        getOption(options, 'onDrag', NOOP)(getSizes());\n    }\n\n    // Cache some important sizes when drag starts, so we don't have to do that\n    // continously:\n    //\n    // `size`: The total size of the pair. First + second + first gutter + second gutter.\n    // `start`: The leading side of the first element.\n    //\n    // ------------------------------------------------\n    // |      aGutterSize -> |||                      |\n    // |                     |||                      |\n    // |                     |||                      |\n    // |                     ||| <- bGutterSize       |\n    // ------------------------------------------------\n    // | <- start                             size -> |\n    function calculateSizes() {\n        // Figure out the parent size minus padding.\n        var a = elements[this.a].element;\n        var b = elements[this.b].element;\n\n        var aBounds = a[getBoundingClientRect]();\n        var bBounds = b[getBoundingClientRect]();\n\n        this.size =\n            aBounds[dimension] +\n            bBounds[dimension] +\n            this[aGutterSize] +\n            this[bGutterSize];\n        this.start = aBounds[position];\n        this.end = aBounds[positionEnd];\n    }\n\n    function innerSize(element) {\n        // Return nothing if getComputedStyle is not supported (< IE9)\n        // Or if parent element has no layout yet\n        if (!getComputedStyle) { return null }\n\n        var computedStyle = getComputedStyle(element);\n\n        if (!computedStyle) { return null }\n\n        var size = element[clientSize];\n\n        if (size === 0) { return null }\n\n        if (direction === HORIZONTAL) {\n            size -=\n                parseFloat(computedStyle.paddingLeft) +\n                parseFloat(computedStyle.paddingRight);\n        } else {\n            size -=\n                parseFloat(computedStyle.paddingTop) +\n                parseFloat(computedStyle.paddingBottom);\n        }\n\n        return size\n    }\n\n    // When specifying percentage sizes that are less than the computed\n    // size of the element minus the gutter, the lesser percentages must be increased\n    // (and decreased from the other elements) to make space for the pixels\n    // subtracted by the gutters.\n    function trimToMin(sizesToTrim) {\n        // Try to get inner size of parent element.\n        // If it's no supported, return original sizes.\n        var parentSize = innerSize(parent);\n        if (parentSize === null) {\n            return sizesToTrim\n        }\n\n        if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {\n            return sizesToTrim\n        }\n\n        // Keep track of the excess pixels, the amount of pixels over the desired percentage\n        // Also keep track of the elements with pixels to spare, to decrease after if needed\n        var excessPixels = 0;\n        var toSpare = [];\n\n        var pixelSizes = sizesToTrim.map(function (size, i) {\n            // Convert requested percentages to pixel sizes\n            var pixelSize = (parentSize * size) / 100;\n            var elementGutterSize = getGutterSize(\n                gutterSize,\n                i === 0,\n                i === sizesToTrim.length - 1,\n                gutterAlign\n            );\n            var elementMinSize = minSizes[i] + elementGutterSize;\n\n            // If element is too smal, increase excess pixels by the difference\n            // and mark that it has no pixels to spare\n            if (pixelSize < elementMinSize) {\n                excessPixels += elementMinSize - pixelSize;\n                toSpare.push(0);\n                return elementMinSize\n            }\n\n            // Otherwise, mark the pixels it has to spare and return it's original size\n            toSpare.push(pixelSize - elementMinSize);\n            return pixelSize\n        });\n\n        // If nothing was adjusted, return the original sizes\n        if (excessPixels === 0) {\n            return sizesToTrim\n        }\n\n        return pixelSizes.map(function (pixelSize, i) {\n            var newPixelSize = pixelSize;\n\n            // While there's still pixels to take, and there's enough pixels to spare,\n            // take as many as possible up to the total excess pixels\n            if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n                var takenPixels = Math.min(\n                    excessPixels,\n                    toSpare[i] - excessPixels\n                );\n\n                // Subtract the amount taken for the next iteration\n                excessPixels -= takenPixels;\n                newPixelSize = pixelSize - takenPixels;\n            }\n\n            // Return the pixel size adjusted as a percentage\n            return (newPixelSize / parentSize) * 100\n        })\n    }\n\n    // stopDragging is very similar to startDragging in reverse.\n    function stopDragging() {\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        if (self.dragging) {\n            getOption(options, 'onDragEnd', NOOP)(getSizes());\n        }\n\n        self.dragging = false;\n\n        // Remove the stored event listeners. This is why we store them.\n        global[removeEventListener]('mouseup', self.stop);\n        global[removeEventListener]('touchend', self.stop);\n        global[removeEventListener]('touchcancel', self.stop);\n        global[removeEventListener]('mousemove', self.move);\n        global[removeEventListener]('touchmove', self.move);\n\n        // Clear bound function references\n        self.stop = null;\n        self.move = null;\n\n        a[removeEventListener]('selectstart', NOOP);\n        a[removeEventListener]('dragstart', NOOP);\n        b[removeEventListener]('selectstart', NOOP);\n        b[removeEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = '';\n        a.style.webkitUserSelect = '';\n        a.style.MozUserSelect = '';\n        a.style.pointerEvents = '';\n\n        b.style.userSelect = '';\n        b.style.webkitUserSelect = '';\n        b.style.MozUserSelect = '';\n        b.style.pointerEvents = '';\n\n        self.gutter.style.cursor = '';\n        self.parent.style.cursor = '';\n        document.body.style.cursor = '';\n    }\n\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    function startDragging(e) {\n        // Right-clicking can't start dragging.\n        if ('button' in e && e.button !== 0) {\n            return\n        }\n\n        // Alias frequently used variables to save space. 200 bytes.\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        // Call the onDragStart callback.\n        if (!self.dragging) {\n            getOption(options, 'onDragStart', NOOP)(getSizes());\n        }\n\n        // Don't actually drag the element. We emulate that in the drag function.\n        e.preventDefault();\n\n        // Set the dragging property of the pair object.\n        self.dragging = true;\n\n        // Create two event listeners bound to the same pair object and store\n        // them in the pair object.\n        self.move = drag.bind(self);\n        self.stop = stopDragging.bind(self);\n\n        // All the binding. `window` gets the stop events in case we drag out of the elements.\n        global[addEventListener]('mouseup', self.stop);\n        global[addEventListener]('touchend', self.stop);\n        global[addEventListener]('touchcancel', self.stop);\n        global[addEventListener]('mousemove', self.move);\n        global[addEventListener]('touchmove', self.move);\n\n        // Disable selection. Disable!\n        a[addEventListener]('selectstart', NOOP);\n        a[addEventListener]('dragstart', NOOP);\n        b[addEventListener]('selectstart', NOOP);\n        b[addEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = 'none';\n        a.style.webkitUserSelect = 'none';\n        a.style.MozUserSelect = 'none';\n        a.style.pointerEvents = 'none';\n\n        b.style.userSelect = 'none';\n        b.style.webkitUserSelect = 'none';\n        b.style.MozUserSelect = 'none';\n        b.style.pointerEvents = 'none';\n\n        // Set the cursor at multiple levels\n        self.gutter.style.cursor = cursor;\n        self.parent.style.cursor = cursor;\n        document.body.style.cursor = cursor;\n\n        // Cache the initial sizes of the pair.\n        calculateSizes.call(self);\n\n        // Determine the position of the mouse compared to the gutter\n        self.dragOffset = getMousePosition(e) - self.end;\n    }\n\n    // adjust sizes to ensure percentage is within min size and gutter.\n    sizes = trimToMin(sizes);\n\n    // 5. Create pair and element objects. Each pair has an index reference to\n    // elements `a` and `b` of the pair (first and second elements).\n    // Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object and a gutter.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = i - 1` and `b = i`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |                     |                  |              |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    var pairs = [];\n    elements = ids.map(function (id, i) {\n        // Create the element object.\n        var element = {\n            element: elementOrSelector(id),\n            size: sizes[i],\n            minSize: minSizes[i],\n            maxSize: maxSizes[i],\n            i: i,\n        };\n\n        var pair;\n\n        if (i > 0) {\n            // Create the pair object with its metadata.\n            pair = {\n                a: i - 1,\n                b: i,\n                dragging: false,\n                direction: direction,\n                parent: parent,\n            };\n\n            pair[aGutterSize] = getGutterSize(\n                gutterSize,\n                i - 1 === 0,\n                false,\n                gutterAlign\n            );\n            pair[bGutterSize] = getGutterSize(\n                gutterSize,\n                false,\n                i === ids.length - 1,\n                gutterAlign\n            );\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (\n                parentFlexDirection === 'row-reverse' ||\n                parentFlexDirection === 'column-reverse'\n            ) {\n                var temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        //\n        // Create gutter elements for each pair.\n        if (i > 0) {\n            var gutterElement = gutter(i, direction, element.element);\n            setGutterSize(gutterElement, gutterSize, i);\n\n            // Save bound event listener for removal later\n            pair[gutterStartDragging] = startDragging.bind(pair);\n\n            // Attach bound event listener\n            gutterElement[addEventListener](\n                'mousedown',\n                pair[gutterStartDragging]\n            );\n            gutterElement[addEventListener](\n                'touchstart',\n                pair[gutterStartDragging]\n            );\n\n            parent.insertBefore(gutterElement, element.element);\n\n            pair.gutter = gutterElement;\n        }\n\n        setElementSize(\n            element.element,\n            element.size,\n            getGutterSize(\n                gutterSize,\n                i === 0,\n                i === ids.length - 1,\n                gutterAlign\n            ),\n            i\n        );\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair);\n        }\n\n        return element\n    });\n\n    function adjustToMin(element) {\n        var isLast = element.i === pairs.length;\n        var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n        calculateSizes.call(pair);\n\n        var size = isLast\n            ? pair.size - element.minSize - pair[bGutterSize]\n            : element.minSize + pair[aGutterSize];\n\n        adjust.call(pair, size);\n    }\n\n    elements.forEach(function (element) {\n        var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n        if (computedSize < element.minSize) {\n            if (expandToMin) {\n                adjustToMin(element);\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                element.minSize = computedSize;\n            }\n        }\n    });\n\n    function setSizes(newSizes) {\n        var trimmed = trimToMin(newSizes);\n        trimmed.forEach(function (newSize, i) {\n            if (i > 0) {\n                var pair = pairs[i - 1];\n\n                var a = elements[pair.a];\n                var b = elements[pair.b];\n\n                a.size = trimmed[i - 1];\n                b.size = newSize;\n\n                setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n                setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n            }\n        });\n    }\n\n    function destroy(preserveStyles, preserveGutter) {\n        pairs.forEach(function (pair) {\n            if (preserveGutter !== true) {\n                pair.parent.removeChild(pair.gutter);\n            } else {\n                pair.gutter[removeEventListener](\n                    'mousedown',\n                    pair[gutterStartDragging]\n                );\n                pair.gutter[removeEventListener](\n                    'touchstart',\n                    pair[gutterStartDragging]\n                );\n            }\n\n            if (preserveStyles !== true) {\n                var style = elementStyle(\n                    dimension,\n                    pair.a.size,\n                    pair[aGutterSize]\n                );\n\n                Object.keys(style).forEach(function (prop) {\n                    elements[pair.a].element.style[prop] = '';\n                    elements[pair.b].element.style[prop] = '';\n                });\n            }\n        });\n    }\n\n    return {\n        setSizes: setSizes,\n        getSizes: getSizes,\n        collapse: function collapse(i) {\n            adjustToMin(elements[i]);\n        },\n        destroy: destroy,\n        parent: parent,\n        pairs: pairs,\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Split);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/split.js/dist/split.es.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/vendor/Onix/js/codeEditor/grapeCodeEditor.js");
/******/ 	
/******/ })()
;